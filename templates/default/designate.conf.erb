[DEFAULT]

########################
## General Configuration
########################
policy_file = /etc/designate/policy.json
rabbit_hosts = <%= @rabbitmq_hosts.join(', ') %>
rabbit_password = <%= @rabbitmq_password %>
<%
node[:designate]['DEFAULT'].sort.each do |key, value|
  next if ['policy_file', 'rabbit_hosts', 'rabbit_password'].include?(key)

  if value.nil? or (value.kind_of?(Array) and value.empty?)
    next
  elsif value.kind_of?(Array)
    _buf << "#{key} = #{value.join(', ')}\n"
  else
    _buf << "#{key} = #{value}\n"
  end
end
-%>

########################
## Service Configuration
########################
#-----------------------
# Central Service
#-----------------------
[service:central]
<%
node[:designate]['service:central'].sort.each do |key, value|
  if value.nil? or (value.kind_of?(Array) and value.empty?)
    next
  elsif value.kind_of?(Array)
    _buf << "#{key} = #{value.join(', ')}\n"
  else
    _buf << "#{key} = #{value}\n"
  end
end
-%>

#-----------------------
# API Service
#-----------------------
[service:api]
<%
node[:designate]['service:api'].sort.each do |key, value|
  if value.nil? or (value.kind_of?(Array) and value.empty?)
    next
  elsif value.kind_of?(Array)
    _buf << "#{key} = #{value.join(', ')}\n"
  else
    _buf << "#{key} = #{value}\n"
  end
end
-%>

#-----------------------
# Agent Service
#-----------------------
[service:agent]
<%
node[:designate]['service:agent'].sort.each do |key, value|
  if value.nil? or (value.kind_of?(Array) and value.empty?)
    next
  elsif value.kind_of?(Array)
    _buf << "#{key} = #{value.join(', ')}\n"
  else
    _buf << "#{key} = #{value}\n"
  end
end
-%>

#-----------------------
# Sink Service
#-----------------------
[service:sink]
<%
node[:designate]['service:sink'].sort.each do |key, value|
  if value.nil? or (value.kind_of?(Array) and value.empty?)
    next
  elsif value.kind_of?(Array)
    _buf << "#{key} = #{value.join(', ')}\n"
  else
    _buf << "#{key} = #{value}\n"
  end
end
-%>

########################
## Storage Configuration
########################
#-----------------------
# SQLAlchemy Storage
#-----------------------
[storage:sqlalchemy]
database_connection = <%= @sqlalchemy_database_connection %>
<%
node[:designate]['storage:sqlalchemy'].sort.each do |key, value|
  next if key == 'database_connection'

  if value.nil? or (value.kind_of?(Array) and value.empty?)
    next
  elsif value.kind_of?(Array)
    _buf << "#{key} = #{value.join(', ')}\n"
  else
    _buf << "#{key} = #{value}\n"
  end
end
-%>

########################
## Handler Configuration
########################
#-----------------------
# Nova Fixed Handler
#-----------------------
[handler:nova_fixed]
<%
node[:designate]['handler:nova_fixed'].sort.each do |key, value|
  if value.nil? or (value.kind_of?(Array) and value.empty?)
    next
  elsif value.kind_of?(Array)
    _buf << "#{key} = #{value.join(', ')}\n"
  else
    _buf << "#{key} = #{value}\n"
  end
end
-%>

#------------------------
# Quantum Floating Handler
#------------------------
[handler:quantum_floating]
<%
node[:designate]['handler:quantum_floating'].sort.each do |key, value|
  if value.nil? or (value.kind_of?(Array) and value.empty?)
    next
  elsif value.kind_of?(Array)
    _buf << "#{key} = #{value.join(', ')}\n"
  else
    _buf << "#{key} = #{value}\n"
  end
end
-%>

########################
## Backend Configuration
########################
#-----------------------
# Bind9 Backend
#-----------------------
[backend:bind9]
<%
node[:designate]['backend:bind9'].sort.each do |key, value|
  if value.nil? or (value.kind_of?(Array) and value.empty?)
    next
  elsif value.kind_of?(Array)
    _buf << "#{key} = #{value.join(', ')}\n"
  else
    _buf << "#{key} = #{value}\n"
  end
end
-%>

#-----------------------
# PowerDNS Backend
#-----------------------
[backend:powerdns]
database_connection = <%= @powerdns_database_connection %>
<%
node[:designate]['backend:powerdns'].sort.each do |key, value|
  next if key == 'database_connection'

  if value.nil? or (value.kind_of?(Array) and value.empty?)
    next
  elsif value.kind_of?(Array)
    _buf << "#{key} = #{value.join(', ')}\n"
  else
    _buf << "#{key} = #{value}\n"
  end
end
-%>

<%
@extra_sections.sort.each do |section|
  _buf << "[#{section}]\n"

  node[:designate][section].sort.each do |key, value|
    if value.nil? or (value.kind_of?(Array) and value.empty?)
      next
    elsif value.kind_of?(Array)
      _buf << "#{key} = #{value.join(', ')}\n"
    else
      _buf << "#{key} = #{value}\n"
    end
  end

  _buf << "\n"
end
-%>
